version: 2.1

# Resources: https://circleci.com/blog/building-android-on-circleci/
# and: https://circleci.com/developer/orbs/orb/circleci/android#commands-start-emulator

# The config.yml of Circleci is like a functional programming script that contains methods (called jobs)
# and a main method (called workflows) where these jobs are listed in the order they are to run.
# When you push a branch to CircleCI, CircleCi will go to the workflows section and run each job one
# after the other.

# A job is like a method. It is a set of commands you want CircleCi to run for you.
# Inside the job's code, you must have a section called *steps*. In this *steps* section, you will list all
# the commands that you want the job to contain.
# Now, there are some default-pre-written commands CircleCi has that makes things easy for you. You
# can simply copy-paste them. See the list of all inbuilt-pre-written commands (at the left side on the menu):
# https://circleci.com/developer/orbs/orb/circleci/android#usage-run-ui-tests-job

# Alternatively, if you want to write your own custom command, you will need to use a *run* command
# block (demonstrated in the examples below)

orbs:
  android: circleci/android@1.0.3
  gcp-cli: circleci/gcp-cli@2.2.0

jobs:

  unit-test: # A job to run unit test (Note: The name of the job can be anything you want it to be)
    executor:
      name: android/android-machine
      resource-class: xlarge
    steps: # The steps block where we list the commands we want CircleCi to run when this job is called.
      - checkout # an inbuilt-pre-written command
      - android/restore-gradle-cache # an inbuilt-pre-written command
      - android/restore-build-cache # an inbuilt-pre-written command
      - android/run-tests: # an inbuilt-pre-written command
          test-command: ./gradlew testDebug # setting a parameter on this command
      - android/save-gradle-cache # an inbuilt-pre-written command
      - android/save-build-cache # an inbuilt-pre-written command
      - run: # a command that allows us write our own custom command. We are writing a custom command
          # to copy the unit tests results from the default path to a path were we want to display them.
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results: # an inbuilt-pre-written command
          path: ~/test-results
      - store_artifacts: # an inbuilt-pre-written command
          path: ~/test-results/junit


  instrumentation-test: # A job to run instrumentation tests
    executor:
      name: android/android-machine
      resource-class: xlarge
    steps:
      - checkout
      - android/start-emulator-and-run-tests: # an inbuilt-pre-written command to start the emulator and run instrumentation tests
          test-command: ./gradlew connectedDebugAndroidTest
          system-image: system-images;android-29;google_apis;x86 # We want to use an android 10 emulator.
      - run:  # a command that allows us write our own custom command. We are writing a custom command
          # to copy the instrumentation tests results from the default path to a path were we want to display them.
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/outputs/androidTest-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  # Note that the code above will work ONLY for instrumentation tests that don't contain any UI test (Espresso)
  # If you want to test an Espresso test for example, all the test cases will fail.
  # So if you know your code base does not contain any UI instrumentation test (Espresso), you can use it. Else use the
  # in-built android/run-ui-tests job:
  # https://circleci.com/developer/orbs/orb/circleci/android#usage-run-ui-tests-job
  # the in the documentation, android/run-ui-tests job wraps the android/start-emulator-and-run-tests command
  # this means that we shouldn't even be using android/start-emulator-and-run-tests command. Just use the
  # in-built run-ui-tests job to run UI and Instrumentation tests too. It is capable of doing both.
  # This is why we didn't call this our instrumentation-test job in the workflow block. We used run-ui-tests job.


  # The duty of this job is to create a release variant build type.
  # The build we will generate will be an un-signed apk. This is ok. To generate a signed apk to be released,
  # it is better to use fastlane because the process of generating signed apk using circle ci is a bit complex.
  release-build:
    executor:
      name: android/android-machine
      resource-class: xlarge
    steps:
      - checkout
      - android/restore-gradle-cache
      - android/restore-build-cache
      - run:
          name: Assemble release build
          command: | # Here we are building the release variant using assembleRelease gradle instruction.
            ./gradlew assembleRelease
      - store_artifacts:
          path: app/build/outputs/apk/release/app-release-unsigned.apk

# We created a workflow called test-and-build.
# When you push a commit, our work flow will trigger and these are the job that will run on that branch:
# 1) We will run unit tests
# 2) We will run UI tests on Android version 11 only, for now, so that we don't spend to much time on UI testing.
# This is ok for any other branch apart from master branch. On master branch, we will like to test on all devices commands:

# 3) We will run UI tests on Android 7 - 12 (ie Api 24 -32), ONLY if the branch is the *master* branch
# 4) We will create a release build, ONLY if the branch is the *master* branch

# DO READ UP THIS PAGE IN THE LINK BELOW BECAUSE THAT IS WHERE WE GO ALL OF THE INFORMATION WE ARE USING:
# https://circleci.com/blog/building-android-on-circleci/

workflows:
  test-and-build:
    jobs:
      - unit-test
      # - instrumentation-test  We comment out the instrumentation test job because it will always fail UI tests. We don't need it.
      - android/run-ui-tests: # Now we call the inbuilt job to run ui tests. Because it is inbuilt, we need to drop it here in the workflow.
          # You don't need to write the steps for inbuilt jobs. They have already been written for you.

          # The android/run-ui-tests has some parameters:
          executor:
            name: android/android-machine
            resource-class: xlarge
          system-image: system-images;android-29;google_apis;x86 # Use Android 10 emulator.
          post-run-tests-steps: # A parameter that allows you lists steps you want to perform after the run-ui-tests has finished.
            # We want to display the UI/Instrumentation tests results. So we perform the following steps:
            - checkout
            - run: # We use the run command to create a custom 'command' to copy tests results from the default path to a path were we want to display them.
                name: Save test results
                command: |
                  mkdir -p ~/test-results/junit/
                  find . -type f -regex ".*/build/outputs/androidTest-results/.*xml" -exec cp {} ~/test-results/junit/ \;
                when: always
            - store_test_results:
                path: ~/test-results
            - store_artifacts:
                path: ~/test-results/junit
          filters: # We use the filters key to specify that this job should NOT run on the master branch
            branches:
              ignore: master

      # We need another UI test job for commits to our master branch. We will make this job run on multiple devices (Android 8 -11):
      - android/run-ui-tests:
          executor:
            name: android/android-machine
            resource-class: xlarge
          matrix:
            alias: ui_test_on_multiple_devices
            parameters:
              system-image:
                - system-images;android-28;google_apis;x86
          system-image: << matrix.system-image >> # This tells CircleCi to loop through the matrix of system images and run the UI/Instrumentation tests on them.
          post-run-tests-steps: # A parameter that allows you lists steps you want to perform after the run-ui-tests has finished.
            # We want to display the UI/Instrumentation tests results. So we perform the following steps:
            - checkout
            - run: # We use the run command to create a custom 'command' to copy tests results from the default path to a path were we want to display them.
                name: Save test results
                command: |
                  mkdir -p ~/test-results/junit/
                  find . -type f -regex ".*/build/outputs/androidTest-results/.*xml" -exec cp {} ~/test-results/junit/ \;
                when: always
            - store_test_results:
                path: ~/test-results
            - store_artifacts:
                path: ~/test-results/junit
          filters:
            branches:
              only: master

      - release-build: # The release-build job requires that the unit-test and run-ui-tests
          # (CircleCi will figure out which of the run-ui-tests we are referring to here) run successfully before it starts,
          # and it will only start if it is the master branch.
          requires:
            - unit-test
            - android/run-ui-tests
          filters:
            branches:
              only: master